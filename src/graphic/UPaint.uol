// Copyright (c) 2013 Zhe Wang
// Email: wzedmund@gmail.com
// History:21/12/2014
// Version:1.0.0
package graphic;
import sys;

public class UPaint
{
	define int BLACK = 0;
	define int WHITE = 0xFFFF;
	define int BLUE = 0x001F;
	define int BRED = 0xF81F;
	define int GRED = 0x07FF;
	define int RED = 0xF800;
	define int MAGENTA = 0xF81F;
	define int GREEN = 0x07E0;
	define int CYAN = 0x7FFF;
	define int YELLOW = 0xFFE0;
	define int BROWN = 0xBC40;
	define int BRRED = 0xFC07;
	define int GRAY = 0x8430;
	define int LGRAY = 0XC618;
	
	public native int getWidth();
	
	public native int getHeight();
	
	public native void onOff(boolean v);
	
	public native void setPoint(int x,int y,int color);
	
	public native int getPoint(int x,int y);
	
	public native void fill(int x1,int y1,int x2,int y2,int color);
	
	public native void drawChar(int x,int y,int c,int font,int color);
	
	public void drawString(int x,int y,int font,int color,String s)
	{
		char[] c;
		int len,i;
		c = s.getChars();
		len = s.length();
		
		for(i=0;i<len;i=i+1)
		{
			drawChar(x,y,(int)c[i],font,color);
			x=x+font/2;
		}
	}
	
	public void drawLine(int x1,int y1,int x2,int y2,int color)
	{			
		int t; 
		int xerr=0,yerr=0,delta_x,delta_y,distance; 
		int incx,incy,uRow,uCol; 

		delta_x=x2-x1;
		delta_y=y2-y1; 
		uRow=x1; 
		uCol=y1; 
		
		if(delta_x>0) incx=1; 
		else if(delta_x==0)incx=0; 
		else 
		{
			incx = -1;
			delta_x = -delta_x;
		} 
		if(delta_y>0)incy=1; 
		else if(delta_y==0)incy=0;
		else
		{
			incy=-1;
			delta_y = -delta_y;
		} 
		if( delta_x>delta_y)distance=delta_x;
		else distance=delta_y; 
		
		for(t=0;t<=distance+1;t++ )
		{  
			setPoint(uRow,uCol,color);
			xerr = xerr + delta_x ; 
			yerr = yerr + delta_y ; 
			if(xerr>distance) 
			{ 
				xerr = xerr - distance; 
				uRow = uRow + incx; 
			} 
			if(yerr>distance) 
			{ 
				yerr = yerr - distance; 
				uCol = uCol + incy; 
			} 
		}  
	}
	
	public void drawRect(int x1,int y1,int x2,int y2,int color)
	{
		int i;
		for(i=0;i<=x2-x1;i++)
		{
			setPoint(x1+i,y1,color);
			setPoint(x1+i,y2,color);
		}
		
		for(i=0;i<=y2-y1;i++)
		{
			setPoint(x1,y1+i,color);
			setPoint(x2,y1+i,color);
		}
	}
	
	public void drawCircle(int xc, int yc, int r,int c) 
	{
		if (xc + r < 0 || xc - r >= getWidth() || yc + r < 0 || yc - r >= getHeight()) return;
	 
		int x = 0, y = r, yi, d;
		d = 3 - 2 * r;
	 
		
		while (x <= y) 
		{
			setPoint(xc + x, yc + y, c);
			setPoint(xc - x, yc + y, c);
			setPoint(xc + x, yc - y, c);
			setPoint(xc - x, yc - y, c);
			setPoint(xc + y, yc + x, c);
			setPoint(xc - y, yc + x, c);
			setPoint(xc + y, yc - x, c);
			setPoint(xc - y, yc - x, c);
			if (d < 0) 
			{
				d = d + 4 * x + 6;
			} 
			else 
			{
				d = d + 4 * (x - y) + 10;
				y --;
			}
			x++;
		}
		
	}
	
	public void fillCircle(int xc, int yc, int r,int c) 
	{
		if (xc + r < 0 || xc - r >= getWidth() || yc + r < 0 || yc - r >= getHeight()) return;
	 
		int x = 0, y = r, yi, d;
		d = 3 - 2 * r;
	 
		
		while (x <= y) 
		{
            for (yi = x; yi <= y; yi ++)
			{
				setPoint(xc + x, yc + yi, c);
				setPoint(xc - x, yc + yi, c);
				setPoint(xc + x, yc - yi, c);
				setPoint(xc - x, yc - yi, c);
				setPoint(xc + yi, yc + x, c);
				setPoint(xc - yi, yc + x, c);
				setPoint(xc + yi, yc - x, c);
				setPoint(xc - yi, yc - x, c);
			}
 
            if (d < 0) {
                d = d + 4 * x + 6;
            } else {
                d = d + 4 * (x - y) + 10;
                y--;
            }
            x++;
        }
	}
}